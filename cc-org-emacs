;; org-mode config
;;

(message "Setting up org-mode ...")

;;------------------
;; org-mode
;;------------------
;; This initial configuration draws heavily from:
;;   http://doc.norang.ca/org-mode.html

(defun cc/org-set-todo-state (target-state)
  (interactive)
  (if (not (member target-state org-todo-keywords-for-agenda))
      (message "Unknown TODO state: %s" target-state)
    (while (not (string= (org-get-todo-state) target-state))
      (org-shiftright))))

(defun cc/org-todo-toggle-started ()
  (interactive)
  (if (string= (org-get-todo-state) "TODO")
      (org-todo "LIVE")
    (org-todo "TODO")))

(defun cc/org-todo-finish (&optional prefix)
  (interactive "P")
  (org-todo "DONE")
  (org-cycle)
  (let ((parent-is-todo
         (save-excursion
           (org-up-heading-safe)
           (org-entry-is-todo-p))))
    (unless (or parent-is-todo prefix)
      (org-archive-subtree))))

(defun cc/org-parent-is-todo-p ()
  "Return t iff the parent of this entry is a todo item (in any state)."
  (save-excursion
    (org-up-heading-safe)
    (org-entry-is-todo-p)))

(defun cc/org-insert-next-subheading ()
  "Insert a TODO, either at the current level or below. Used in capture."
  (interactive)
  (if (cc/org-parent-is-todo-p)
      (org-insert-todo-heading nil)
    (org-insert-todo-subheading nil)))

(defconst cc/org-icebox-file nil
  "Default file for iceboxed TODOs.")

(defconst cc/org-default-tips-file nil
  "Default file for tips.")

(defconst cc/org-default-quotes-file nil
  "Default file for quotes.")

(defun cc/org-icebox ()
  "Move this entry to the icebox, cc/org-icebox-file."
  (interactive)
  (org-refile nil nil (list "Iceboxed Tasks/" cc/org-icebox-file nil 42))
  (with-current-buffer (find-file-noselect cc/org-icebox-file)
    (save-buffer 0))
  (save-buffer 0))

(defun cc/org-keys-hook ()
  ;; Undefine C-c [ and C-c ], in favor of explicit management of the
  ;; org-agenda-files variable.
  (org-defkey org-mode-map "\C-c[" 'undefined)
  (org-defkey org-mode-map "\C-c]" 'undefined)
  (org-defkey org-mode-map "\C-c;" 'undefined)
  ;; I want some single-chord shortcuts for movement; this seems
  ;; like a good set, but we'll see.
  (org-defkey org-mode-map "\M-\C-f" 'outline-next-visible-heading)
  (org-defkey org-mode-map "\M-\C-b" 'outline-previous-visible-heading)
  (org-defkey org-mode-map "\M-\C-n" 'org-forward-heading-same-level)
  (org-defkey org-mode-map "\M-\C-p" 'org-backward-heading-same-level)
  (org-defkey org-mode-map "\M-\C-u" 'outline-up-heading)
  (org-defkey org-mode-map "\M-\C-k" 'org-cut-subtree)
  ;; I'd love M-C-d, but OSX eats that keystroke.
  (org-defkey org-mode-map "\M-\C-d" 'cc/org-todo-finish)
  (org-defkey org-mode-map "\M-\C-w" 'cc/org-todo-finish)
  (org-defkey org-mode-map "\M-\C-s" 'cc/org-todo-toggle-started)
  (org-defkey org-mode-map "\M-\C-z" 'cc/org-icebox)
  (org-defkey org-mode-map "\M-\C-t" 'cc/org-insert-next-subheading))
;; We append to make sure the undefs above take effect.
(add-hook 'org-mode-hook 'cc/org-keys-hook 'append)

;; More org-mode variable settings, in lieu of customize.
(eval-after-load 'org
  '(progn
     ;; General config
     (setq org-startup-indented t)
     (setq org-startup-folded 'content)
     (setq org-M-RET-may-split-line
           '((default . nil) (table . t)))
     (setq org-special-ctrl-a/e t)
     (setq org-special-ctrl-k t)
     (setq org-yank-adjusted-subtrees t)
     (setq org-id-method 'uuidgen)
     (setq org-cycle-separator-lines 0)
     (setq org-blank-before-new-entry '((heading) (plain-list-item)))
     ;; Where the org files live
     (setq org-directory "~/w/todo")
     (setq org-agenda-files (list org-directory))
     (setq org-default-notes-file (concat org-directory "/todo.org"))
     (setq cc/org-default-tips-file (concat org-directory "/tips.org"))
     (setq cc/org-default-quotes-file (concat org-directory "/quotes.org"))
     (setq cc/org-icebox-file (concat org-directory "/icebox.org"))
     ;; Add contrib/ to the load path
     (cc/add-to-load-path-if-exists "org-contrib/lisp")
     ;; Agenda-related config.
     (setq org-agenda-ndays 4)
     ;; Archive into a tree.
     (setq org-archive-location "%s_archive::* Archived Tasks")
     ;; org-velocity
     (require 'org-velocity)
     (setq org-velocity-bucket (concat org-directory "/velocity-bucket.org"))
     (setq org-velocity-exit-on-match t)
     (setq org-velocity-use-completion t)
     ;; mobile org
     ;; (2012 Aug 08) Giving up on mobile-org for now.
     ;; (setq org-mobile-directory "~/w/mobile-org")
     ;; (setq org-mobile-force-id-on-agenda-items nil)
     ;; (setq org-mobile-inbox-for-pull
     ;;            (concat org-directory "/mobile-inbox.org"))
     ;; Configure the capture templates
     (setq org-capture-templates
           (quote (("t" "todo" entry (file+headline org-default-notes-file "Tasks")
                    "* TODO %? %^G\n%T\n")
                   ("c" "todo with context" entry
                    (file+headline org-default-notes-file "Tasks")
                    "* TODO %? %^G\n%T\n%a\n")
                   ("p" "tips" entry
                    (file+headline cc/org-default-tips-file "Tips")
                    "* %? %^G\n%U\n%a\n")
                   ("q" "quote" entry
                    (file+headline cc/org-default-quotes-file "Quotes")
                    "* %?\n%^{AUTHOR}p\n%T\n")
                   ("n" "note" entry
                    (file+headline org-default-notes-file "Notes")
                    "* %? :NOTE:%^G\n%U\n%a\n")
                   ("j" "Journal" entry
                    (file+datetree org-default-notes-file)
                    "* %?\nEntered on %U\n  %i\n  %a")
                   ("v" "velocity entry" entry
                    (file org-velocity-bucket)
                    "* %:search\n\n%i%?")
                   )))
     ;; ido-based refile completion
     (setq org-refile-targets '((nil :maxlevel . 1)
                                (org-agenda-files :maxlevel . 1)))
     (setq org-refile-use-outline-path 'file)
     (setq org-outline-path-complete-in-steps nil)
     (setq org-refile-allow-creating-parent-nodes 'confirm)
     (setq org-completion-use-ido t)
     ;; Task states and related configuration
     (setq org-todo-keywords
           '((type "TODO(t!)" "|" "DONE(d!)")
             (sequence "LIVE(l!)" "HOLDING(h@/!)")))
     (setq org-use-fast-todo-selection t)
     (setq org-treat-S-cursor-todo-selection-as-state-change nil)
     (setq org-log-into-drawer t)
     ;; Tags
     (setq org-fast-tag-selection-single-key nil)
     ;; I tend to use this as a complete list of common tags.
     (setq org-tag-persistent-alist
           (quote (("Rstats" . ?R)
                   ("config" . ?c)
                   ("emacs" . ?e)
                   ("googs" . ?g)
                   ("life" . ?l)
                   ("org" . ?o)
                   ("python" . ?p)
                   ("read" . ?r)
                   ("statsy" . ?s)
                   ("watch" . ?w)
                   )))
     ))

(when (require 'org-install nil t)
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.org_archive$" . org-mode))
  ;; Global org keys
  (global-set-key "\C-cl" 'org-insert-link)
  (global-set-key "\C-cg" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cv" 'org-velocity-read)
  ;; Secondary keystrokes for each:
  (global-set-key "\M-\C-l" 'org-insert-link)
  (global-set-key "\M-\C-a" 'org-agenda)
  (global-set-key "\M-\C-b" 'org-iswitchb)
  (global-set-key "\M-\C-r" 'org-capture)
  ;; Auto-save org buffers every 30 min
  (run-at-time "00:07" 1800 'org-save-all-org-buffers)
  )
